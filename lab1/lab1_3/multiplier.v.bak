module multiplier (
	input [3:0] A,
	input [3:0] B,
	output [7:0] result
);

	reg [7:0] temp_result;
	reg [3:0] partial_product;
	reg carry_in, carry_out;

// Generate the partial products

	for (int i = 0; i < 4; i++) begin
		partial_product = {B[i], 3'b0};
		carry_out = 1'b0;
		
		for (int j = 0; j < 4; j++) begin
		
			FA adder( partial_product[j], 
						 A[j], 
						 carry_in, 
						 temp_result[j+i], 
						 carry_out);
						 
			carry_in = carry_out;
			
		end

		temp_result[i+4] = carry_out;
		
	end


// Add the partial products using full adders

always @(*) begin

	carry_in = 1'b0;

	for (int i = 0; i < 8; i++) begin
		
		FA adder(temp_result[i], 
					result[i], 
					carry_in, 
					result[i], 
					carry_out);
					
		carry_in = carry_out;

		end
end 

	module FA(
		input  A,B,
		input Cin,
		output  S,
		output Cout,
	);

		assign S = A^B^Cin;
		assign Cout = (A&B) | (B&Cin) | (Cin&A);
	
	endmodule

endmodule 