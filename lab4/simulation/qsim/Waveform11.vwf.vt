// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/19/2023 20:31:24"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Control_unit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Control_unit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg [8:0] IR;
reg Resetn;
reg Run;
// wires                                               
wire AddSub;
wire Ain;
wire DINout;
wire Done;
wire Gin;
wire Gout;
wire IRin;
wire [7:0] Rin;
wire [7:0] Rout;

// assign statements (if any)                          
Control_unit i1 (
// port map - connection between master ports and signals/registers   
	.AddSub(AddSub),
	.Ain(Ain),
	.Clock(Clock),
	.DINout(DINout),
	.Done(Done),
	.Gin(Gin),
	.Gout(Gout),
	.IR(IR),
	.IRin(IRin),
	.Resetn(Resetn),
	.Rin(Rin),
	.Rout(Rout),
	.Run(Run)
);
initial 
begin 
#1000000 $finish;
end 
// IR[ 8 ]
initial
begin
	IR[8] = 1'b0;
end 
// IR[ 7 ]
initial
begin
	IR[7] = 1'b0;
	IR[7] = #390000 1'b1;
end 
// IR[ 6 ]
initial
begin
	IR[6] = 1'b1;
end 
// IR[ 5 ]
initial
begin
	IR[5] = 1'b0;
end 
// IR[ 4 ]
initial
begin
	IR[4] = 1'b1;
	IR[4] = #390000 1'b0;
end 
// IR[ 3 ]
initial
begin
	IR[3] = 1'b0;
end 
// IR[ 2 ]
initial
begin
	IR[2] = 1'b1;
	IR[2] = #390000 1'b0;
end 
// IR[ 1 ]
initial
begin
	IR[1] = 1'b0;
	IR[1] = #390000 1'b1;
end 
// IR[ 0 ]
initial
begin
	IR[0] = 1'b0;
	IR[0] = #390000 1'b1;
end 

// Run
initial
begin
	Run = 1'b0;
	Run = #40000 1'b1;
	Run = #30000 1'b0;
	Run = #370000 1'b1;
	Run = #20000 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #50000 1'b1;
	#50000;
end 

// Resetn
initial
begin
	Resetn = 1'b1;
end 
endmodule

